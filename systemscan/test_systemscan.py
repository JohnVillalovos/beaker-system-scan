#!/usr/bin/python
import unittest
import main

class PushInventoryTest(unittest.TestCase):

    def setUp(self):
        # Dumping 500 lines of xml directly into a unit test is not ok
        inputxml = open("./test_systemscan_xml").read()
        self.out = main.read_inventory(inputxml)[1]

    def test_read_inventory_devices(self):

	devicelist=[{'vendorID': '0000', 'description': '2429BN6 (LENOVO_MT_2429)', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': None, 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'fedora.echorand'}, {'vendorID': '0000', 'description': '2429BN6', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': None, 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'core'}, {'vendorID': '0000', 'description': 'Core i7 (None)', 'subsysVendorID': '0000', 'bus': 'cpu', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cpu'}, {'vendorID': '0000', 'description': 'L1 cache', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cache:0'}, {'vendorID': '0000', 'description': 'L2 cache', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cache:1'}, {'vendorID': '0000', 'description': 'L3 cache', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cache:2'}, {'vendorID': '0000', 'description': 'L1 cache', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cache'}, {'vendorID': '0000', 'description': 'System Memory', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'memory'}, {'vendorID': '0000', 'description': 'M471B1G73BH0-CK0', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'bank:0'}, {'vendorID': '0000', 'description': 'DIMM [empty]', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'bank:1'}, {'vendorID': '0000', 'description': 'BIOS', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'firmware'}, {'vendorID': '8086', 'description': '3rd Gen Core processor DRAM Controller', 'subsysVendorID': '0000', 'bus': 'pci', 'driver': None, 'deviceID': '154', 'subsysDeviceID': '0000', 'type': 'pci'}, {'vendorID': '8086', 'description': '3rd Gen Core processor Graphics Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '166', 'subsysDeviceID': '21F6', 'type': 'display'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family USB xHCI Host Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E31', 'subsysDeviceID': '21F6', 'type': 'usb:0'}, {'vendorID': '1D6B', 'description': 'xHCI Host Controller', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '3', 'subsysDeviceID': '0000', 'type': 'usbhost:0'}, {'vendorID': '1D6B', 'description': 'xHCI Host Controller', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '2', 'subsysDeviceID': '0000', 'type': 'usbhost:1'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family MEI Controller #1', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E3A', 'subsysDeviceID': '21F6', 'type': 'communication:0'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family KT Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E3D', 'subsysDeviceID': '21F6', 'type': 'communication:1'}, {'vendorID': '8086', 'description': '82579LM Gigabit Network Connection', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1502', 'subsysDeviceID': '21F3', 'type': 'network'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family USB Enhanced Host Controller #2', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E2D', 'subsysDeviceID': '21F6', 'type': 'usb:1'}, {'vendorID': '1D6B', 'description': 'EHCI Host Controller', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '2', 'subsysDeviceID': '0000', 'type': 'usbhost'}, {'vendorID': '8087', 'description': 'Integrated Rate Matching Hub', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '24', 'subsysDeviceID': '0000', 'type': 'usb'}, {'vendorID': 'A5C', 'description': 'BCM20702A0', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '21E6', 'subsysDeviceID': '0000', 'type': 'usb:0'}, {'vendorID': '4F2', 'description': 'Integrated Camera', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': 'B2EA', 'subsysDeviceID': '0000', 'type': 'usb:1'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family High Definition Audio Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E20', 'subsysDeviceID': '21F6', 'type': 'multimedia'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family PCI Express Root Port 1', 'subsysVendorID': '0', 'bus': 'pci', 'driver': None, 'deviceID': '1E10', 'subsysDeviceID': '0', 'type': 'pci:0'}, {'vendorID': '1180', 'description': 'MMC/SD Host Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': 'E822', 'subsysDeviceID': '21F6', 'type': 'generic'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family PCI Express Root Port 2', 'subsysVendorID': '0', 'bus': 'pci', 'driver': None, 'deviceID': '1E12', 'subsysDeviceID': '0', 'type': 'pci:1'}, {'vendorID': '8086', 'description': 'Centrino Ultimate-N 6300', 'subsysVendorID': '8086', 'bus': 'pci', 'driver': None, 'deviceID': '4238', 'subsysDeviceID': '1111', 'type': 'network'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family PCI Express Root Port 3', 'subsysVendorID': '0', 'bus': 'pci', 'driver': None, 'deviceID': '1E14', 'subsysDeviceID': '0', 'type': 'pci:2'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family USB Enhanced Host Controller #1', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E26', 'subsysDeviceID': '21F6', 'type': 'usb:2'}, {'vendorID': '1D6B', 'description': 'EHCI Host Controller', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '2', 'subsysDeviceID': '0000', 'type': 'usbhost'}, {'vendorID': '8087', 'description': 'Integrated Rate Matching Hub', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '24', 'subsysDeviceID': '0000', 'type': 'usb'}, {'vendorID': '93A', 'description': 'USB Optical Mouse', 'subsysVendorID': '0000', 'bus': 'usb', 'driver': None, 'deviceID': '2510', 'subsysDeviceID': '0000', 'type': 'usb'}, {'vendorID': '8086', 'description': 'QM77 Express Chipset LPC Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E55', 'subsysDeviceID': '21F6', 'type': 'isa'}, {'vendorID': '8086', 'description': '7 Series Chipset Family 6-port SATA Controller [AHCI mode]', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E03', 'subsysDeviceID': '21F6', 'type': 'storage'}, {'vendorID': '8086', 'description': '7 Series/C210 Series Chipset Family SMBus Controller', 'subsysVendorID': '17AA', 'bus': 'pci', 'driver': None, 'deviceID': '1E22', 'subsysDeviceID': '21F6', 'type': 'serial'}, {'vendorID': '0000', 'description': 'Unknown', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'scsi:0'}, {'vendorID': '0000', 'description': 'TOSHIBA MK5061GS', 'subsysVendorID': '0000', 'bus': 'scsi', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'disk'}, {'vendorID': '0000', 'description': 'EXT4 volume', 'subsysVendorID': '0000', 'bus': 'scsi', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'volume:0'}, {'vendorID': '0000', 'description': 'Linux swap volume', 'subsysVendorID': '0000', 'bus': 'scsi', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'volume:1'}, {'vendorID': '0000', 'description': 'Linux filesystem partition', 'subsysVendorID': '0000', 'bus': 'scsi', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'volume:2'}, {'vendorID': '0000', 'description': 'Unknown', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'scsi:1'}, {'vendorID': '0000', 'description': 'DVDRAM GT50N', 'subsysVendorID': '0000', 'bus': 'scsi', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'cdrom'}, {'vendorID': '0000', 'description': '45N1007', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': 'Unknown', 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'battery'}, {'vendorID': '0000', 'description': 'Ethernet interface', 'subsysVendorID': '0000', 'bus': 'Unknown', 'driver': None, 'deviceID': '0000', 'subsysDeviceID': '0000', 'type': 'network'}]

        for device in devicelist:
            self.assertTrue(device in self.out['Devices'], "Device missing, or incorrectly reported: %s" % device['description'])

    def test_read_inventory_cpu(self):
        # Most cpu details are taken straight from proc, not the lshw xml
        # and so are not covered by this test


	flags = ['x86-64', 'fpu', 'fpu_exception', 'wp', 'vme', 'de', 'pse', 'tsc', 'msr', 'pae', 'mce', 'cx8', 'apic', 'sep', 'mtrr', 'pge', 'mca', 'cmov', 'pat', 'pse36', 'clflush', 'dts', 'acpi', 'mmx', 'fxsr', 'sse', 'sse2', 'ss', 'ht', 'tm', 'pbe', 'syscall', 'nx', 'rdtscp', 'constant_tsc', 'arch_perfmon', 'pebs', 'bts', 'rep_good', 'nopl', 'xtopology', 'nonstop_tsc', 'aperfmperf', 'eagerfpu', 'pni', 'pclmulqdq', 'dtes64', 'monitor', 'ds_cpl', 'vmx', 'smx', 'est', 'tm2', 'ssse3', 'cx16', 'xtpr', 'pdcm', 'pcid', 'sse4_1', 'sse4_2', 'x2apic', 'popcnt', 'tsc_deadline_timer', 'aes', 'xsave', 'avx', 'f16c', 'rdrand', 'lahf_lm', 'ida', 'arat', 'epb', 'xsaveopt', 'pln', 'pts', 'dtherm', 'tpr_shadow', 'vnmi', 'flexpriority', 'ept', 'vpid', 'fsgsbase', 'smep', 'erms', 'cpufreq']

        arch = 'x86-64'
        vendor = 'Intel Corp.'
        modelname = 'Core i7 (None)'
        self.assertEqual(arch, self.out['Arch'][0], "Expected %s for Arch, got %s" % (arch, self.out['Arch'][0]))
        self.assertEqual(vendor, self.out['Cpu']['vendor'], "Expected %s for Cpu vendor, got %s" % (vendor, self.out['Cpu']['vendor']))
        self.assertEqual(modelname, self.out['Cpu']['modelName'], "Expected %s for Cpu model, got %s" % (modelname, self.out['Cpu']['modelName']))
        for flag in self.out['Cpu']['CpuFlags']:
            self.assertTrue(flag in flags, "Flag missing from CpuFlags")

if __name__ == "__main__":
    unittest.main()
